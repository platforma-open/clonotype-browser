self := import("@platforma-sdk/workflow-tengo:tpl")
ll := import("@platforma-sdk/workflow-tengo:ll")
smart := import("@platforma-sdk/workflow-tengo:smart")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
maps := import("@platforma-sdk/workflow-tengo:maps")
file := import("@platforma-sdk/workflow-tengo:file")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
json := import("json")

self.awaitState("columnBundle", { wildcard: "*" }, "data", "InputsLocked")
self.awaitState("columnBundle", { wildcard: "*" }, "spec", "ResourceReady")

ptransformSw := assets.importSoftware("@platforma-open/milaboratories.software-ptransform:main")

self.body(func(inputs) {

	blockArgs := inputs.blockArgs
	columnBundle := inputs.columnBundle

	columnBundle.setHeader("pl7.app/vdj/clonotypeKey", "clonotypeKey")

	extraColumnsMapBuilder := smart.mapBuilder()

	for idx, extraColumn in blockArgs.extraColumns {
		table := columnBundle.xsvTableBuilder().
			add(extraColumn.metaColumn, { header: "meta" }).
			add(extraColumn.targetColumn, { header: "target" }).
			build("tsv")

		pWorkflow := {
			steps: [ {
				type: "aggregate",
				groupBy: ["clonotypeKey", "meta"],
				aggregations: [ {
					type: string(extraColumn.operation),
					src: "target",
					dst: "result"
				} ]
			} ]
		}

		aggregateCmd := exec.builder().
			printErrStreamToStdout().
			software(ptransformSw).
			arg("--workflow").arg("wf.json").
			writeFile("wf.json", json.encode(pWorkflow)).
			arg("input.tsv").addFile("input.tsv", table).
			arg("output.tsv").saveFile("output.tsv").
			run()

		processedTsv := aggregateCmd.getFile("output.tsv")
		extraColumnsMapBuilder.add(string(idx), file.exportFile(processedTsv))
	}

    return {
        extraColumns: extraColumnsMapBuilder.build()
    }
})
