self := import("@platforma-sdk/workflow-tengo:tpl")
ll := import("@platforma-sdk/workflow-tengo:ll")
smart := import("@platforma-sdk/workflow-tengo:smart")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pFrames := import("@platforma-sdk/workflow-tengo:pframes")
maps := import("@platforma-sdk/workflow-tengo:maps")
slices := import("@platforma-sdk/workflow-tengo:slices")
file := import("@platforma-sdk/workflow-tengo:file")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
pBuilder := import("@platforma-sdk/workflow-tengo:pframes.builder")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
json := import("json")
text := import("text")
math := import("math")
strings := import("@platforma-sdk/workflow-tengo:strings")

util := import(":util")

// Input headers
SAMPLE_KEY_HEADER := "sample_key"
CLONOTYPE_KEY_HEADER := "clonotype_key"

// Result headers
SAMPLE_COUNT_HEADER := "sample_count"
ANNOTATION_LABEL_HEADER := "label"

// Import ptransform software
ptransformSw := assets.importSoftware("@platforma-open/milaboratories.software-ptransform:main")

self.awaitState("columnBundle", { wildcard: "*" }, "ref", "ResourceReady")
self.awaitState("columnBundle", { wildcard: "*" }, "data", "InputsLocked")
self.awaitState("columnBundle", { wildcard: "*" }, "spec", "ResourceReady")

annotatorSw := assets.importSoftware("@platforma-open/milaboratories.clonotype-browser-2.annotator:main")
annotation2filtersSw := assets.importSoftware("@platforma-open/milaboratories.clonotype-browser-2.annotation2filters:main")

self.body(func(inputs) {
	blockId := inputs.blockId
	blockArgs := inputs.blockArgs
	columnBundle := inputs.columnBundle
	rawAnnotationScript := blockArgs.annotationScript

	anchorSpec := columnBundle.getColumn(blockArgs.inputAnchor).spec
	if len(anchorSpec.axesSpec) != 2 {
		ll.panic("Input anchor must have exactly 2 axes (sample, clonotype), found %d", len(anchorSpec.axesSpec))
	}
	sampleAxisSpec := anchorSpec.axesSpec[0]
	clonotypeAxisSpec := anchorSpec.axesSpec[1]


	mainFraction := columnBundle.getColumn(util.mainFractionColumn)
	if is_undefined(mainFraction) {
		ll.panic("Main abundance fraction column is required, but not found.")
	}

	mainFractionSpec := mainFraction.spec
	mainFractionData := mainFraction.data

	mainCount := columnBundle.getColumn(util.mainCountColumn)
	if is_undefined(mainCount) {
		ll.panic("Main count column is required, but not found.")
	}

	mainCountSpec := mainCount.spec
	mainCountData := mainCount.data

	outputs := {}

	if len(rawAnnotationScript.steps) == 0 {
		return outputs
	}

	// Preparing annotation script inputs

	mode := rawAnnotationScript.mode

	scriptColumns := util.extractColumnsFromFilter(rawAnnotationScript) // Already returns unique list

	numberOfColumns := len(scriptColumns)

	clonoTableBuilder := pFrames.tsvFileBuilder().cpu(1).mem(string(1 + numberOfColumns * 2) + "GiB")
	sampleTableBuilder := pFrames.tsvFileBuilder().cpu(1).mem(string(1 + numberOfColumns * 2) + "GiB")

	clonoTableBuilder.setAxisHeader(clonotypeAxisSpec, CLONOTYPE_KEY_HEADER)

	sampleTableBuilder.setAxisHeader(sampleAxisSpec, SAMPLE_KEY_HEADER)
	sampleTableBuilder.setAxisHeader(clonotypeAxisSpec, CLONOTYPE_KEY_HEADER)

	clonoSchemaMap := {}
	clonoSchemaMap[CLONOTYPE_KEY_HEADER] = { column: CLONOTYPE_KEY_HEADER, type: clonotypeAxisSpec.type }

	sampleSchemaMap := {}
	sampleSchemaMap[SAMPLE_KEY_HEADER] = { column: SAMPLE_KEY_HEADER, type: sampleAxisSpec.type }
	sampleSchemaMap[CLONOTYPE_KEY_HEADER] = { column: CLONOTYPE_KEY_HEADER, type: clonotypeAxisSpec.type }

	headerMap := {}

	needsClonoTable := (mode == "byClonotype")
	needsSampleTable := (mode == "bySampleAndClonotype")

	for colId in scriptColumns {
		colSpec := columnBundle.getSpec(colId)
		numAxes := len(colSpec.axesSpec)


		if numAxes == 1 {
			// Belongs in clonotype table
			clonoTableBuilder.add(columnBundle.getColumn(colId))
			header := clonoTableBuilder.getHeader(colId)
			spec := clonoTableBuilder.getSpec(colId)
			clonoSchemaMap[header] = { column: header, type: spec.valueType }
			needsClonoTable = true // Mark true if any 1-axis col is used, even in bySample mode
			headerMap[colId] = header
		} else if numAxes == 2 {
			// Belongs in sample-clonotype table
			if mode == "byClonotype" {
				ll.panic("Column %s has 2 axes but mode is 'byClonotype'. The script expects only 1-axis columns in this mode.", colId)
			}
			sampleTableBuilder.add(columnBundle.getColumn(colId))
			header := sampleTableBuilder.getHeader(colId)
			spec := sampleTableBuilder.getSpec(colId)
			sampleSchemaMap[header] = { column: header, type: spec.valueType }
			needsSampleTable = true
			headerMap[colId] = header
		} else {
			ll.panic("Column %s has an unexpected number of axes (%d), expected 1 or 2.", colId, numAxes)
		}
	}

	finalAnnotationScript := maps.deepMerge(util.transformAnnotationScriptColumns(
		rawAnnotationScript,
		func(column) {
			return headerMap[column]
		}
	), {
		title: undefined
	})

	// Setting the key columns for the script
	finalAnnotationScript.clonotypeKeyColumn = CLONOTYPE_KEY_HEADER
	if mode == "bySampleAndClonotype" {
		finalAnnotationScript.sampleKeyColumn = SAMPLE_KEY_HEADER
	}

	cmd := exec.builder().
		printErrStreamToStdout().
		cpu(math.max(numberOfColumns + 1, 16)).
		mem(string(int(math.min(math.max(numberOfColumns, 2) * 4, 96))) + "GiB").
		software(annotatorSw)

	cmd.writeFile("script.json", json.encode(finalAnnotationScript))
	cmd.arg("--script").arg("script.json")

	if needsClonoTable {
		clonoTable := clonoTableBuilder.build()
		clonoSchema := maps.getValues(clonoSchemaMap)
		if len(clonoSchema) == 0 {
			ll.panic("Clonotype table is required by mode or columns, but the resulting table is empty.")
		}
		cmd.addFile("clonotype_properties.tsv", clonoTable)
		cmd.arg("--clonotype-data").arg("clonotype_properties.tsv")
		cmd.writeFile("clonotype_properties_schema.json", json.encode(clonoSchema))
		cmd.arg("--clonotype-schema").arg("clonotype_properties_schema.json")
	}

	if needsSampleTable {
		sampleTable := sampleTableBuilder.build()
		sampleSchema := maps.getValues(sampleSchemaMap)
		if len(sampleSchema) == 0 {
			ll.panic("Sample-clonotype table is required by mode, but the resulting table is empty.")
		}
		cmd.addFile("sample_clonotype_properties.tsv", sampleTable)
		cmd.arg("--sample-clonotype-data").arg("sample_clonotype_properties.tsv")
		cmd.writeFile("sample_clonotype_properties_schema.json", json.encode(sampleSchema))
		cmd.arg("--sample-clonotype-schema").arg("sample_clonotype_properties_schema.json")
	}

	cmd.saveFile("output.tsv")
	cmd.arg("--output").arg("output.tsv")

	taggerResult := cmd.run()
	processedResult := taggerResult.getFile("output.tsv")

	//
	// Converting result to PColumn
	//

	fullAxesSpec := [clonotypeAxisSpec]
	importAxesSpec := [{
		column: CLONOTYPE_KEY_HEADER,
		spec: { type: clonotypeAxisSpec.type }
	}]
	partitionKeyLength := 0

	if mode == "bySampleAndClonotype" {
		importAxesSpec = [{
			column: SAMPLE_KEY_HEADER,
			spec: { type: sampleAxisSpec.type }
		}] + importAxesSpec
		fullAxesSpec = [sampleAxisSpec] + fullAxesSpec
		partitionKeyLength = 1
	}

	importedDataMap := xsv.importFile(processedResult, "tsv", {
		axes: importAxesSpec,
		columns: [ {
			column: ANNOTATION_LABEL_HEADER,
			spec: { valueType: "String" }
		} ],
		partitionKeyLength: partitionKeyLength,
		storageFormat: "Binary",
		mem: "12GiB",
		cpu: 1
	}, { dataOnly: true })

	annotationData := importedDataMap.getFutureInputField(ANNOTATION_LABEL_HEADER)

	annotationPfBuilder := pFrames.pFrameBuilder()

	trace := pSpec.makeTrace(anchorSpec, {
		type: "milaboratories.clonotype-browser-2.annotation",
		label: rawAnnotationScript.title,
		importance: 20,
		id: blockId
	})
	annotationsColumnSpec := trace.inject({
		kind: "PColumn",
		valueType: "String",
		name: "pl7.app/vdj/annotation",
		domain: {
			"pl7.app/vdj/clonotypeAnnotationRunId": blockId
		},
		axesSpec: fullAxesSpec,
		annotations: {
			"pl7.app/label": rawAnnotationScript.title
		}
	})
	annotationsAxisSpec := {
		type: "String",
		name: "pl7.app/vdj/annotation",
		domain: {
			"pl7.app/vdj/clonotypeAnnotationRunId": blockId
		},
		annotations: {
			"pl7.app/label": rawAnnotationScript.title
		}
	}

	annotationPfBuilder.add("annotation", annotationsColumnSpec, annotationData)

	//
	// Generating Filter PColumns from Annotations
	//

	uniqueLabels := util.extractAnnotationLabels(finalAnnotationScript)

	filterInputSchema := [{ column: CLONOTYPE_KEY_HEADER, type: clonotypeAxisSpec.type }]
	if mode == "bySampleAndClonotype" {
		// Prepend sample key if it exists
		filterInputSchema = [{ column: SAMPLE_KEY_HEADER, type: sampleAxisSpec.type }] + filterInputSchema
	}
	filterInputSchema = append(filterInputSchema, { column: ANNOTATION_LABEL_HEADER, type: "String" })

	filterChannels := []
	filterOutputFiles := {}
	filterOutputSafeLabels := {}

	for label in uniqueLabels {
		safeLabel := strings.substituteSpecialCharacters(label)
		filename := "filter_" + safeLabel + ".tsv"
		filterChannels = append(filterChannels, { label: label, file: filename })
		filterOutputFiles[label] = filename
		filterOutputSafeLabels[label] = safeLabel
	}

	filterCmd := exec.builder().
		printErrStreamToStdout().
		software(annotation2filtersSw).
		cpu(4).
		mem(string(int(12 + math.min(math.max(len(uniqueLabels), 2) * 2, 46))) + "GiB").
		addFile("input.tsv", processedResult).
		arg("--input").arg("input.tsv").
		writeFile("input_schema.json", json.encode(filterInputSchema)).
		arg("--schema").arg("input_schema.json").
		arg("--label-column").arg(ANNOTATION_LABEL_HEADER).
		writeFile("filter_channels.json", json.encode(filterChannels)).
		arg("--filter-channels").arg("filter_channels.json")

	for filename in maps.getValues(filterOutputFiles) {
		filterCmd.saveFile(filename)
	}

	filterResult := filterCmd.run()

	filtersPfBuilder := pFrames.pFrameBuilder()

	for label in uniqueLabels {
		filename := filterOutputFiles[label]
		safeLabel := filterOutputSafeLabels[label]

		filterTsv := filterResult.getFile(filename)

		filterImportSpec := {
			axes: importAxesSpec,
			columns: [{ column: "one", spec: { valueType: "Int" } }],
			partitionKeyLength: 0,
			storageFormat: "Binary"
		}

		filterImportMap := xsv.importFile(filterTsv, "tsv", filterImportSpec, { dataOnly: true, cpu: 1, mem: "8GiB" })
		filterData := filterImportMap.getFutureInputField("one")

		filterColumnSpec := {
			kind: "PColumn",
			name: "pl7.app/vdj/filter",
			valueType: "Int",
			axesSpec: fullAxesSpec,
			domain: {
				"pl7.app/vdj/clonotypeAnnotationRunId": blockId,
				"pl7.app/vdj/filterLabel": label
			},
			annotations: {
				"pl7.app/label": label,
				"pl7.app/isSubset": "true"
			}
		}

		trace := pSpec.makeTrace(anchorSpec, {
			type: "milaboratories.clonotype-browser-2.annotation",
			label: rawAnnotationScript.title,
			importance: 20,
			id: blockId
		}, {
			type: "milaboratories.clonotype-browser-2.filter",
			label: label,
			importance: 25,
			id: blockId
		})

		finalFilterSpec := trace.inject(filterColumnSpec)

		filtersPfBuilder.add(safeLabel, finalFilterSpec, filterData)
	}

	outputs["filtersPf"] = filtersPfBuilder.build()

	//
	// Calculating result statistics
	//

	FRACTION_VALUE_HEADER := "FractionValue"

	relabelAxes := func(spec) {
		return maps.deepTransform(spec, {
			axesSpec: func(axes) {
				return slices.map(axes, func(axis) {
					if text.has_suffix(axis.name, "lonotypeKey") {
						return maps.deepMerge(axis, {
							annotations: {
								"pl7.app/label": CLONOTYPE_KEY_HEADER
							}
						})
					}
					if axis.name == "pl7.app/sampleId" {
						return maps.deepMerge(axis, {
							annotations: {
								"pl7.app/label": SAMPLE_KEY_HEADER
							}
						})
					}
					ll.panic("Unexpected axis name: %s", axis.name)
				})
			}
		})
	}

	statsInputData := [
		{ spec: relabelAxes(maps.deepMerge(mainFractionSpec, {
			annotations: { "pl7.app/label": FRACTION_VALUE_HEADER }
		})), data: mainFractionData },
		{ spec: relabelAxes(maps.deepMerge(annotationsColumnSpec, {
			annotations: { "pl7.app/label": ANNOTATION_LABEL_HEADER }
		})), data: annotationData }
	]

	statsTsv := xsv.exportFrame(statsInputData, "tsv", { naStr: "NaN", nullStr: "null", cpu: 1, mem: "8GiB" })

	TOTAL_FRACTION_HEADER := FRACTION_VALUE_HEADER + "_sum"
	CLONOTYPE_COUNT_HEADER := FRACTION_VALUE_HEADER + "_count"

	transformParams := {
		steps: [{
			type: "aggregate",
			groupBy: [SAMPLE_KEY_HEADER, ANNOTATION_LABEL_HEADER],
			aggregations: [
				{ type: "sum", src: FRACTION_VALUE_HEADER, dst: TOTAL_FRACTION_HEADER },
				{ type: "count", src: FRACTION_VALUE_HEADER, dst: CLONOTYPE_COUNT_HEADER }
			]
		}]
	}

	transformCmd := exec.builder().
		printErrStreamToStdout().
		software(ptransformSw).
		cpu(1).
		mem("8GiB").
		writeFile("wf.json", json.encode(transformParams)).
		arg("--workflow").arg("wf.json").
		addFile("input.tsv", statsTsv).
		arg("input.tsv").
		arg("aggregated_stats.tsv").
		saveFile("aggregated_stats.tsv")

	transformResult := transformCmd.run()
	aggregatedTsv := transformResult.getFile("aggregated_stats.tsv")

	statsAxesSpec := [sampleAxisSpec, annotationsAxisSpec]

	statsImportSpec := {
		axes: [
			{ column: SAMPLE_KEY_HEADER, spec: { type: sampleAxisSpec.type } },
			{ column: ANNOTATION_LABEL_HEADER, spec: { type: annotationsAxisSpec.type } }
		],
		columns: [
			{ column: TOTAL_FRACTION_HEADER, spec: { valueType: mainFractionSpec.valueType } },
			{ column: CLONOTYPE_COUNT_HEADER, spec: { valueType: "Long" } }
		],
		partitionKeyLength: 1,
		storageFormat: "Binary"
	}

	statsImportedMap := xsv.importFile(aggregatedTsv, "tsv", statsImportSpec, { dataOnly: true, cpu: 1, mem: "2GiB" })

	totalFractionData := statsImportedMap.getFutureInputField(TOTAL_FRACTION_HEADER)
	numberOfClonotypesData := statsImportedMap.getFutureInputField(CLONOTYPE_COUNT_HEADER)

	totalFractionSpec := trace.inject({
		kind: "PColumn",
		name: "pl7.app/vdj/stats/totalFraction",
		valueType: mainFractionSpec.valueType,
		axesSpec: statsAxesSpec,
		annotations: {
			"pl7.app/label": "Total Fraction"
		}
	})

	numberOfClonotypesSpec := trace.inject({
		kind: "PColumn",
		name: "pl7.app/vdj/stats/numberOfClonotypes",
		valueType: "Long",
		axesSpec: statsAxesSpec,
		annotations: {
			"pl7.app/label": "Total Number of Clonotypes"
		}
	})

	statsPfBuilder := pFrames.pFrameBuilder()
	statsPfBuilder.add("totalFraction", totalFractionSpec, totalFractionData)
	statsPfBuilder.add("numberOfClonotypes", numberOfClonotypesSpec, numberOfClonotypesData)

	outputs["annotationPf"] = annotationPfBuilder.build()
	outputs["statsPf"] = statsPfBuilder.build()

	return outputs
})
