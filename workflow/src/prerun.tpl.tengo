ll := import("@platforma-sdk/workflow-tengo:ll")
wf := import("@platforma-sdk/workflow-tengo:workflow")
smart := import("@platforma-sdk/workflow-tengo:smart")
file := import("@platforma-sdk/workflow-tengo:file")
assets := import("@platforma-sdk/workflow-tengo:assets")
render := import("@platforma-sdk/workflow-tengo:render")
pFrames := import("@platforma-sdk/workflow-tengo:pframes")

util := import(":util")

doCalculationsTpl := assets.importTemplate(":do-calculations")
exportTableTpl := assets.importTemplate(":export-table")

wf.body(func(args) {
	if is_undefined(args.inputAnchor) {
		return {
			outputs: {},
			exports: {}
		}
	}

	blockId := wf.blockId().getDataAsJson()

	outputs := {}

	bundleBuilderForExport := wf.createPBundleBuilder()

	bundleBuilderForExport.addAnchor("main", args.inputAnchor)
	bundleBuilderForExport.addMulti({ axes: [{ anchor: "main", idx: 0 }, { anchor: "main", idx: 1 }] }, "perSample")
	bundleBuilderForExport.addMulti({ axes: [{ anchor: "main", idx: 1 }] }, "perClonotype")
	bundleBuilderForExport.addSingle({ name: "pl7.app/label", axes: [{ anchor: "main", idx: 0 }] }, "sampleLabels")

	exportResult := render.createEphemeral(exportTableTpl, {
		columnBundle: bundleBuilderForExport.build()
	})

	outputs["tsv"] = file.exportFile(exportResult.output("tsv"))
	outputs["exportDebug"] = exportResult.output("exportDebug")

	columnBundleForAnnotation := util.createColumnBundle(wf, args)
	calculationResult := render.createEphemeral(doCalculationsTpl, {
		blockId: blockId,
		blockArgs: args,
		columnBundle: columnBundleForAnnotation
	})

	// outputs["aggregatesPf"] = pFrames.exportFrame(calculationResult.output("aggregatesPf"))

	if len(args.annotationScript.steps) > 0 {
		outputs["annotationPf"] = pFrames.exportFrame(calculationResult.output("annotationPf"))
		outputs["statsPf"] = pFrames.exportFrame(calculationResult.output("statsPf"))
	}

	return {
		outputs: outputs,
		exports: {}
	}
})
