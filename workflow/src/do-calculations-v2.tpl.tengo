rand := import("rand")
self := import("@platforma-sdk/workflow-tengo:tpl")
pt := import("@platforma-sdk/workflow-tengo:pt")
wf := import("@platforma-sdk/workflow-tengo:workflow")
ll := import("@platforma-sdk/workflow-tengo:ll")
smart := import("@platforma-sdk/workflow-tengo:smart")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pFrames := import("@platforma-sdk/workflow-tengo:pframes")
maps := import("@platforma-sdk/workflow-tengo:maps")
slices := import("@platforma-sdk/workflow-tengo:slices")
file := import("@platforma-sdk/workflow-tengo:file")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
pBuilder := import("@platforma-sdk/workflow-tengo:pframes.builder")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
json := import("json")
text := import("text")
math := import("math")

util := import(":util")
annotationsUtil := import(":annotations")

// Input headers
SAMPLE_KEY_HEADER := "sample_key"
CLONOTYPE_KEY_HEADER := "clonotype_key"

// Result headers
MAIN_COUNT_HEADER := "main_count"
MAIN_FRACTION_HEADER := "main_fraction"

// States headers
ANNOTATION_COUNT_HEADER := "annotation_count"
CLONOTYPE_COUNT_HEADER := "clonotype_count"

// Result file
DATA_FILE := "data.tsv"
SAMPLE_STATS_FILE := "sample_stats.tsv"
ANNOTATION_STATS_FILE := "annotation_stats.tsv"

self.awaitState("columnBundle", { wildcard: "*" }, "ref", "ResourceReady")
self.awaitState("columnBundle", { wildcard: "*" }, "data", "InputsLocked")
self.awaitState("columnBundle", { wildcard: "*" }, "spec", "ResourceReady")

createAxisSpecFactory := func(blockId) {
	return func(type, name, label) {
		return {
			type: type,
			name: "pl7.app/clonotypeAnnotation/" + name,
			domain: {
				"pl7.app/clonotypeAnnotationRunId": blockId
			},
			annotations: {
				"pl7.app/label": label
			}
		}
	}
}

convertColumnSpecToAxisSpec := func(spec) {
	return {
		type: spec.valueType,
		name: spec.name,
		domain: spec.domain,
		annotations: spec.annotations
	}
}

createColumnSpecFactory := func(trace, blockId) {
	return func(type, name, label, axesSpec) {
		return trace.inject({
			kind: "PColumn",
			valueType: type,
			name: "pl7.app/clonotypeAnnotation/" + name,
			domain: {
				"pl7.app/clonotypeAnnotationRunId": blockId
			},
			axesSpec: axesSpec,
			annotations: {
				"pl7.app/label": label
			}
		})
	}
}

createStatsDataAndSpecByAnnotationFactory := func(annotationsAxis, createColumnSpec) {
	return func(file) {
		importSpec := {
			storageFormat: "Binary",
			partitionKeyLength: 0,
			axes: [annotationsAxis],
			columns: [
				{
					column: ANNOTATION_COUNT_HEADER,
					spec: createColumnSpec("Long", "stats/" + ANNOTATION_COUNT_HEADER, "Total Count of Annotations", [annotationsAxis.spec])
				},
				{
					column: CLONOTYPE_COUNT_HEADER,
					spec: createColumnSpec("Long", "stats/" + CLONOTYPE_COUNT_HEADER, "Total Number of Clonotypes", [annotationsAxis.spec])
				}
			]
		}

		return xsv.importFile(file, "tsv", importSpec, { splitDataAndSpec: true })
	}
}

createStatsDataAndSpecBySampleFactory := func(sampleAxis, annotationsAxis, createColumnSpec) {
	return func(file) {
		importAxesSpec := [sampleAxis.spec, annotationsAxis.spec]
		importSpec := {
			storageFormat: "Binary",
			partitionKeyLength: 1,
			axes: [sampleAxis, annotationsAxis],
			columns: [
				{
					column: ANNOTATION_COUNT_HEADER,
					spec: createColumnSpec("Int", "stats/" + ANNOTATION_COUNT_HEADER, "Annotations count", importAxesSpec)
				},
				{
					column: CLONOTYPE_COUNT_HEADER,
					spec: createColumnSpec("Int", "stats/" + CLONOTYPE_COUNT_HEADER, "Clonotypes Number", importAxesSpec)
				},
				{
					column: MAIN_COUNT_HEADER+"_sum",
					spec: createColumnSpec("Double", "stats/" + MAIN_COUNT_HEADER+"_sum", "Count sum", importAxesSpec)
				},
				{
					column: MAIN_FRACTION_HEADER+"_sum",
					spec: createColumnSpec("Double", "stats/" + MAIN_FRACTION_HEADER+"_sum", "Fraction sum", importAxesSpec)
				}
			]
		}

		return xsv.importFile(file, "tsv", importSpec, { splitDataAndSpec: true });
	}
}

convertToPFrame := func(...dataAndSpecs) {
	pf := pFrames.pFrameBuilder()

	for dataAndSpec in dataAndSpecs {
		for k, v in dataAndSpec {
			pf.add(k, v.spec, v.data)
		}
	}

	return pf.build()
}

self.body(func(inputs) {
	blockId := inputs.blockId
	blockArgs := inputs.blockArgs
	columnBundle := inputs.columnBundle
	computeFilters := inputs.computeFilters
	annotationSpecs := blockArgs.annotationSpecs

	outputs := {}

	if len(annotationSpecs.specs) == 0 {
		return outputs
	}

	anchorSpec := columnBundle.getColumn(blockArgs.inputAnchor).spec
	if len(anchorSpec.axesSpec) != 2 {
		ll.panic("Input anchor must have exactly 2 axes (sample, clonotype), found %d", len(anchorSpec.axesSpec))
	}
	sampleAxisSpec := anchorSpec.axesSpec[0]
	clonotypeAxisSpec := anchorSpec.axesSpec[1]

	mainFraction := columnBundle.getColumn(util.mainFractionColumn)
	if is_undefined(mainFraction) {
		ll.panic("Main abundance fraction column is required, but not found.")
	}

	mainCount := columnBundle.getColumn(util.mainCountColumn)
	if is_undefined(mainCount) {
		ll.panic("Main count column is required, but not found.")
	}

	trace := pSpec.makeTrace(anchorSpec, {
		type: "milaboratories.clonotype-annotation",
		label: annotationSpecs.title,
		importance: 20,
		id: blockId
	})

	createAxisSpec := createAxisSpecFactory(blockId)
	createColumnSpec := createColumnSpecFactory(trace, blockId)
	
	// -------------------

	result := annotationsUtil.computeAnnotations({
		annotationScript: annotationSpecs,
		mainAxis: { column: CLONOTYPE_KEY_HEADER, spec: clonotypeAxisSpec },
		blockId: blockId,
		traceSpec: trace,
		computeFilters: computeFilters,

		columnBundle: columnBundle
	})

	annotationsAxis := { column: result.annotations.column, spec: convertColumnSpecToAxisSpec(result.annotations.spec) }
	
	createStatsDataAndSpecByAnnotation := createStatsDataAndSpecByAnnotationFactory(
		annotationsAxis,
		createColumnSpec
	)
	createStatsDataAndSpecBySample := createStatsDataAndSpecBySampleFactory(
		{ column: SAMPLE_KEY_HEADER, spec: sampleAxisSpec },
		annotationsAxis,
		createColumnSpec
	)

	outputs["annotationPf"] = convertToPFrame(result.annotations.dataAndSpec);
	outputs["filtersPf"] = convertToPFrame(slices.map(result.annotationsFilters, func(v) { return v.dataAndSpec }))

	// -------------------

	statsBySampleFileBuilder := pFrames.tsvFileBuilder()
	statsBySampleFileBuilder.setAxisHeader(sampleAxisSpec, SAMPLE_KEY_HEADER)
	statsBySampleFileBuilder.setAxisHeader(clonotypeAxisSpec, CLONOTYPE_KEY_HEADER)

	statsBySampleFileBuilder.add(result.annotations, { header: result.annotations.column })
	statsBySampleFileBuilder.add(mainCount, { header: MAIN_COUNT_HEADER })
	statsBySampleFileBuilder.add(mainFraction, { header: MAIN_FRACTION_HEADER })

	statsBySampleFile := statsBySampleFileBuilder.build()

	wf := pt.workflow()
	wf.frame(statsBySampleFile, { format: "tsv" }).
		groupBy(SAMPLE_KEY_HEADER, result.annotations.column).
		agg(
			pt.col(result.annotations.column).count().alias(ANNOTATION_COUNT_HEADER),
			pt.col(CLONOTYPE_KEY_HEADER).count().alias(CLONOTYPE_COUNT_HEADER),
			pt.col(MAIN_COUNT_HEADER).sum().alias(MAIN_COUNT_HEADER+"_sum"),
			pt.col(MAIN_FRACTION_HEADER).sum().alias(MAIN_FRACTION_HEADER+"_sum")
		).
		save(SAMPLE_STATS_FILE)
	
	wf.frame(result.annotations.file, { format: "tsv" }).
		select(CLONOTYPE_KEY_HEADER, result.annotations.column).
		groupBy(result.annotations.column).
		agg(
			pt.col(result.annotations.column).count().alias(ANNOTATION_COUNT_HEADER),
			pt.col(CLONOTYPE_KEY_HEADER).count().alias(CLONOTYPE_COUNT_HEADER)
		).
		save(ANNOTATION_STATS_FILE)
	wfResult := wf.run()

	outputs["sampleStatsPf"] = convertToPFrame(createStatsDataAndSpecBySample(wfResult.getFile(SAMPLE_STATS_FILE)))
	outputs["annotationStatsPf"] = convertToPFrame(createStatsDataAndSpecByAnnotation(wfResult.getFile(ANNOTATION_STATS_FILE)))

	// -------------------

	return outputs
})
